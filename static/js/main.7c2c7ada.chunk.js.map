{"version":3,"sources":["Components/Heading/Heading.jsx","Components/Utilities.js","Components/Todo/TodoItem.jsx","Components/Form/Form.jsx","Components/Todo/Todo.jsx","Components/App.jsx","index.js"],"names":["Heading","useState","lightMode","setLightMode","handleChangeMode","useEffect","body","document","querySelector","classList","add","remove","className","type","id","name","value","defaultChecked","onChange","htmlFor","getData","key","JSON","parse","localStorage","getItem","setData","setItem","stringify","updateLocalData","func","data","TodoItem","props","isCompleted","setIsCompleted","isDeleted","setIsDeleted","selectionChange","setSelectionChange","swappedElement","setSwappedElement","checkTodo","useRef","completed","todoData","find","todo","from","renderTodoList","filter","Array","index1","findIndex","item","parseInt","currentDrag","current","dataset","index2","draggable","onDragStart","event","target","dataTransfer","effectAllowed","innerHTML","onDragEnter","onDragOver","preventDefault","dropEffect","onDragLeave","onDrop","onDragEnd","checked","ref","onClick","delete","Form","viewRef","formLiveRegion","newTodo","setNewTodo","textContent","timeOut","setTimeout","clearTimeout","onSubmit","Date","now","placeholder","autoComplete","Todo","option","setOption","allTodoData","setAllTodoData","clearCompleted","setClearCompleted","todoItemDeleted","setTodoItemDeleted","currentDragItem","todoItemLiveRegion","todoViewingOption","handleChangeOption","handleRemoveAllCompletedTodo","getAllTodoItemsData","todoDatas","length","timeout","handleRemoveTodoItemLiveRegion","todoContent","map","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7c2c7ada.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\n\nconst Heading = () =>{\n\n  const [lightMode, setLightMode] = useState(false);\n\n  const handleChangeMode = () => setLightMode(!lightMode);\n\n  useEffect(() =>{\n    const body = document.querySelector(\"body\");\n    if (lightMode) {\n      body.classList.add(\"lightmode\");\n    } else {\n      body.classList.remove(\"lightmode\");\n    }\n  }, [lightMode]);\n\n  return (\n    <div className='heading'>\n      <h2 className='heading__title'>todo</h2>\n      <fieldset className=\"colormodes\">\n        <legend className=\"visually-hidden\">Color mode selections</legend>\n        <input \n          className=\"colormodes__input\"\n          type='radio'\n          id='darkmode'\n          name='colormode'\n          aria-label='darkmode'\n          value='darkmode'\n          defaultChecked\n          onChange={handleChangeMode}\n          />\n        <label\n          htmlFor=\"darkmode\"\n          className=\"colormodes__toggler\"\n        />\n        <input \n          className=\"colormodes__input\"\n          type='radio' \n          id='lightmode' \n          name='colormode' \n          aria-label='lightmode'\n          onChange={handleChangeMode}\n           />\n        <label\n          htmlFor=\"lightmode\"\n          className=\"colormodes__toggler\"\n        />\n        <div className=\"colormodes__focus-trick\"></div>\n      </fieldset> \n    </div>\n  );\n}\n\n\nexport default Heading;","\n\nexport const getData = key => JSON.parse(localStorage.getItem(key));\n\nexport const setData = (key, value) => localStorage.setItem(key, JSON.stringify(value));\n\nexport const updateLocalData = func =>{\n  const data = getData(\"todo\");\n  setData(\"todo\", func(data));\n}","import { useState, useEffect, useRef } from \"react\";\nimport { getData, setData, updateLocalData } from \"../Utilities\";\n\n\nconst TodoItem = props =>{\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [isDeleted, setIsDeleted] = useState(false);\n  const [selectionChange, setSelectionChange] = useState(false);\n  const [swappedElement, setSwappedElement] = useState(\"\");\n  const checkTodo = useRef();\n  \n  \n  const handleTodoCheckCompleted = event => {\n    setSelectionChange(true);\n    setIsCompleted(event.target.checked);\n  }\n\n  const handleTodoRemove = () => {\n    setIsDeleted(true);\n    props.delete(props.data.todo);\n  };\n\n  // Checks previous session if todo item is completed or not\n  useEffect(() =>{\n    setIsCompleted(props.data.completed);\n  }, []);\n\n  // Handle any completions of any todo items\n  useEffect(() =>{\n    const handleTodoItemsDataUpdate = () =>{\n      updateLocalData(todoData => {\n        const todoItem = todoData.find(todo => todo.id === props.data.id);\n        todoItem.completed = selectionChange ? isCompleted : props.data.completed;\n        return todoData;\n      })\n    }\n    \n    handleTodoItemsDataUpdate();\n\n    if (props.from !== \"All\") {\n      props.renderTodoList();\n    }\n    setSelectionChange(true);\n  }, [isCompleted]);\n\n  // Handle the deletions of any todo items\n  useEffect(() =>{\n    if (isDeleted) {\n      updateLocalData(todoData => todoData.filter(todo => todo.id !== props.data.id));\n      props.renderTodoList();\n    }\n  }, [isDeleted])\n\n  // Handle the swapping of todo items in localstorage\n  useEffect(() =>{\n    if (swappedElement) {\n      swappedElement.classList.remove(\"enter\");\n      const todoData = Array.from(getData(\"todo\"));\n      const index1 = todoData.findIndex(item => item.id === parseInt(props.currentDrag.current.dataset.id));\n      const index2 = todoData.findIndex(item => item.id === parseInt(swappedElement.dataset.id));\n      if (index1 >=0 && index2 >= 0) {\n        [todoData[index1], todoData[index2]] = [todoData[index2], todoData[index1]]\n      } \n      setData(\"todo\", todoData);\n      props.renderTodoList();\n      setSwappedElement(\"\");\n    }\n  }, [swappedElement])\n\n  const dragStart = event =>{\n    props.currentDrag.current = event.target;\n    event.target.classList.add(\"drag\");\n    event.dataTransfer.effectAllowed = \"move\";\n    event.dataTransfer.setData(\"text/html\", event.target.innerHTML);\n  }\n  \n  const dragEnter = event =>{\n    event.target.classList.add(\"enter\");\n  }\n\n  const dragOver = event =>{\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n    return false;\n  }\n\n  const dragLeave = event =>{\n    event.target.classList.remove(\"enter\");\n  }\n\n  const dragDrop = event =>{\n    if (props.currentDrag.current !== event.target) {\n      setSwappedElement(event.target);\n      event.target.classList.remove(\"enter\")\n    }\n  }\n\n  const dragEnd = event =>{\n    event.target.classList.remove(\"drag\");\n  }\n\n  return (\n    <li className='todo__item' \n      data-id={props.data.id}\n      draggable\n      onDragStart={dragStart}\n      onDragEnter={dragEnter}\n      onDragOver={dragOver}\n      onDragLeave={dragLeave}\n      onDrop={dragDrop}\n      onDragEnd={dragEnd}\n    >\n      <input \n        className='todo__check' \n        type=\"checkbox\" \n        id={`todo-${props.data.id}`}\n        onChange={handleTodoCheckCompleted}\n        ref={checkTodo}\n        checked={isCompleted}\n      />\n      <label className='todo__label' htmlFor={`todo-${props.data.id}`}>\n      <span className=\"visually-hidden\">complete todo item</span>\n        <span>{props.data.todo}</span>\n        \n      </label>\n      <button \n        className='todo__remove' \n        aria-label={`remove ${props.data.todo} todo item`}\n        onClick={handleTodoRemove} />\n    </li>\n  );\n}\n\n\nexport default TodoItem;","import { useState, useEffect, useRef } from \"react\";\nimport { setData, getData } from \"../Utilities\";\n\n\nconst Form = ({viewRef, renderTodoList}) =>{\n  const formLiveRegion = useRef();\n  const [newTodo, setNewTodo] = useState({\n    completed: false,\n    todo: \"\",\n    id: \"\"\n  });\n\n\n  useEffect(() =>{\n    if (newTodo.todo) {\n      const todoData = getData(\"todo\");\n      if (todoData) {\n        setData(\"todo\", [...todoData, newTodo]);\n      } else {\n        setData(\"todo\", [newTodo]);\n      }\n      viewRef(\"All\");\n      renderTodoList();\n      formLiveRegion.current.textContent = \"Successfuly added todo item\";\n      const timeOut = setTimeout(() => formLiveRegion.current.textContent = \"\", 200);\n      return () => clearTimeout(timeOut);\n    }\n  }, [newTodo]);\n\n  const handleTodoSubmit = event =>{\n    event.preventDefault();\n    if (event.target.todo.value) {\n      setNewTodo({\n        completed: false,\n        todo: event.target.todo.value,\n        id: Date.now()\n      });\n      event.target.todo.value = \"\";\n    }\n  }\n\n  return (\n    <form className=\"form\" onSubmit={handleTodoSubmit}>\n      <div className=\"form__holder\">\n        <input \n          type=\"text\" \n          className=\"form__todo\"\n          name='todo'\n          id='todo'\n          placeholder='Create a new todo...'\n          aria-label=\"Create a new todoitem...\"\n          autoComplete='off' />\n      </div>\n      <div ref={formLiveRegion} className=\"visually-hidden\" aria-live='polite'></div>\n    </form>\n  );\n} \n\n\nexport default Form;","import { useState, useEffect, useRef } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport Form from \"../Form/Form\";\nimport { getData, updateLocalData } from \"../Utilities\";\n\n\nconst Todo = () =>{\n  const [option, setOption] = useState(\"All\");\n  const [allTodoData, setAllTodoData] = useState([]);\n  const [clearCompleted, setClearCompleted] = useState(false);\n  const [todoItemDeleted, setTodoItemDeleted] = useState(\"\");\n  const currentDragItem = useRef();\n  const todoItemLiveRegion = useRef();\n  const todoViewingOption = useRef();\n\n  const handleChangeOption = event => setOption(event.target.textContent);\n\n  const handleRemoveAllCompletedTodo = () => setClearCompleted(true);\n\n  const getAllTodoItemsData = () =>{\n    const todoDatas = getData(\"todo\");\n    if (todoDatas) {\n      switch (option) {\n        case \"Active\":\n          setAllTodoData(todoDatas.filter(todo => !todo.completed));\n          break;\n        case \"Completed\":\n          setAllTodoData(todoDatas.filter(todo => todo.completed));\n          break;\n        case \"All\":\n          setAllTodoData(todoDatas);\n          break;\n        default:\n      }\n    }\n  }\n\n  // Handle when selection of filter changes\n  useEffect(()=>{\n    getAllTodoItemsData();\n    todoViewingOption.current.textContent = `showing ${option} todo items`;\n    const timeOut = setTimeout(() => todoViewingOption.current.textContent = \"\", 200);\n    return () => clearTimeout(timeOut);\n  }, [option]);\n\n  // Handle when user want to clear all completed\n  useEffect(() =>{\n    if (clearCompleted) {\n      updateLocalData(todoData => todoData.filter(todo => !todo.completed));\n      getAllTodoItemsData();\n      setClearCompleted(false);\n    }\n  },[clearCompleted])\n\n  useEffect(() =>{\n    if (todoItemDeleted) {\n      todoItemLiveRegion.current.textContent = `${todoItemDeleted} successfuly removed. ${allTodoData.length-1} items remaining`;\n      const timeout = setTimeout(() => todoItemLiveRegion.current.textContent = \"\", 200);\n      return () => clearTimeout(timeout);\n    }\n  }, [todoItemDeleted]);\n  \n  const handleRemoveTodoItemLiveRegion = todoContent => setTodoItemDeleted(todoContent);\n  \n\n  const renderTodoItems = () => allTodoData.map(todo => (\n    <TodoItem\n      data={todo}\n      key={todo.id}\n      renderTodoList={getAllTodoItemsData}\n      currentDrag={currentDragItem}\n      from={option}\n      delete={handleRemoveTodoItemLiveRegion}\n    />)\n  );\n\n  return (\n    <>\n      <Form renderTodoList={getAllTodoItemsData} viewRef={setOption}/>\n      <div className=\"todo\">\n        <div ref={todoItemLiveRegion} className=\"visually-hidden\" aria-live='polite'></div>\n        <div className=\"todo__container\">\n          <ul className=\"todo__items\">\n            {renderTodoItems()}\n          </ul>\n          <div className=\"todo__remaining\">\n            <span>{allTodoData.length} items left</span>\n            <button onClick={handleRemoveAllCompletedTodo} aria-label='clear all completed todo item'>Clear Completed</button>\n          </div>\n        </div>\n        <div ref={todoViewingOption} aria-live='polite' className=\"visually-hidden\"></div>\n        <ul className=\"todo__options\">\n          <li className='todo__option'>\n            <span>{allTodoData.length} items left</span>\n          </li>\n          <li className={option === \"All\"? 'todo__option selected': 'todo__option'}>\n            <button onClick={handleChangeOption} aria-label='Show all todo items'>All</button>\n          </li>\n          <li className={option === \"Active\"? 'todo__option selected': 'todo__option'}>\n            <button onClick={handleChangeOption} aria-label='Show all active todo items'>Active</button>\n          </li>\n          <li className={option === \"Completed\"? 'todo__option selected': 'todo__option'}>\n            <button onClick={handleChangeOption} aria-label='Show all completed todo items'>Completed</button>\n          </li>\n          <li className='todo__option'>\n            <button onClick={handleRemoveAllCompletedTodo} aria-label='clear all completed todo item'>Clear Completed</button>\n          </li>\n        </ul>\n        <div className=\"todo__bottom-text\">Drag and drop to reorder list</div>\n      </div>\n    </>\n  );\n}\n\n\nexport default Todo;","import Heading from \"./Heading/Heading\";\nimport Todo from \"./Todo/Todo\";\n\n\nconst App = () =>{\n  return (\n    <main>\n      <h1 className='visually-hidden'>Frontendmentor todo application</h1>\n      <Heading />\n      <Todo />\n    </main>\n  );\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./Components/App\";\nimport \"./css/style.css\";\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}